// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orc8r/cloud/go/services/certifier/protos/certifier.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protos "magma/orc8r/lib/go/protos"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Effect int32

const (
	Effect_UNKNOWN Effect = 0
	Effect_DENY    Effect = 1
	Effect_ALLOW   Effect = 2
)

var Effect_name = map[int32]string{
	0: "UNKNOWN",
	1: "DENY",
	2: "ALLOW",
}

var Effect_value = map[string]int32{
	"UNKNOWN": 0,
	"DENY":    1,
	"ALLOW":   2,
}

func (x Effect) String() string {
	return proto.EnumName(Effect_name, int32(x))
}

func (Effect) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{0}
}

type Action int32

const (
	Action_NONE  Action = 0
	Action_READ  Action = 1
	Action_WRITE Action = 2
)

var Action_name = map[int32]string{
	0: "NONE",
	1: "READ",
	2: "WRITE",
}

var Action_value = map[string]int32{
	"NONE":  0,
	"READ":  1,
	"WRITE": 2,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{1}
}

type ResourceType int32

const (
	// URI is the relative path to the resource, e.g. "/networks/{network_id}"
	ResourceType_URI        ResourceType = 0
	ResourceType_NETWORK_ID ResourceType = 1
	ResourceType_TENANT_ID  ResourceType = 2
)

var ResourceType_name = map[int32]string{
	0: "URI",
	1: "NETWORK_ID",
	2: "TENANT_ID",
}

var ResourceType_value = map[string]int32{
	"URI":        0,
	"NETWORK_ID": 1,
	"TENANT_ID":  2,
}

func (x ResourceType) String() string {
	return proto.EnumName(ResourceType_name, int32(x))
}

func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{2}
}

type CertificateInfo struct {
	Id                   *protos.Identity     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NotBefore            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	NotAfter             *timestamp.Timestamp `protobuf:"bytes,3,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	CertType             protos.CertType      `protobuf:"varint,4,opt,name=cert_type,json=certType,proto3,enum=magma.orc8r.CertType" json:"cert_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CertificateInfo) Reset()         { *m = CertificateInfo{} }
func (m *CertificateInfo) String() string { return proto.CompactTextString(m) }
func (*CertificateInfo) ProtoMessage()    {}
func (*CertificateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{0}
}

func (m *CertificateInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateInfo.Unmarshal(m, b)
}
func (m *CertificateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateInfo.Marshal(b, m, deterministic)
}
func (m *CertificateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateInfo.Merge(m, src)
}
func (m *CertificateInfo) XXX_Size() int {
	return xxx_messageInfo_CertificateInfo.Size(m)
}
func (m *CertificateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateInfo proto.InternalMessageInfo

func (m *CertificateInfo) GetId() *protos.Identity {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CertificateInfo) GetNotBefore() *timestamp.Timestamp {
	if m != nil {
		return m.NotBefore
	}
	return nil
}

func (m *CertificateInfo) GetNotAfter() *timestamp.Timestamp {
	if m != nil {
		return m.NotAfter
	}
	return nil
}

func (m *CertificateInfo) GetCertType() protos.CertType {
	if m != nil {
		return m.CertType
	}
	return protos.CertType_DEFAULT
}

type CertificateInfoMap struct {
	Certificates         map[string]*CertificateInfo `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CertificateInfoMap) Reset()         { *m = CertificateInfoMap{} }
func (m *CertificateInfoMap) String() string { return proto.CompactTextString(m) }
func (*CertificateInfoMap) ProtoMessage()    {}
func (*CertificateInfoMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{1}
}

func (m *CertificateInfoMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateInfoMap.Unmarshal(m, b)
}
func (m *CertificateInfoMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateInfoMap.Marshal(b, m, deterministic)
}
func (m *CertificateInfoMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateInfoMap.Merge(m, src)
}
func (m *CertificateInfoMap) XXX_Size() int {
	return xxx_messageInfo_CertificateInfoMap.Size(m)
}
func (m *CertificateInfoMap) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateInfoMap.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateInfoMap proto.InternalMessageInfo

func (m *CertificateInfoMap) GetCertificates() map[string]*CertificateInfo {
	if m != nil {
		return m.Certificates
	}
	return nil
}

type AddCertRequest struct {
	Id                   *protos.Identity `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CertDer              []byte           `protobuf:"bytes,2,opt,name=cert_der,json=certDer,proto3" json:"cert_der,omitempty"`
	CertType             protos.CertType  `protobuf:"varint,3,opt,name=cert_type,json=certType,proto3,enum=magma.orc8r.CertType" json:"cert_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AddCertRequest) Reset()         { *m = AddCertRequest{} }
func (m *AddCertRequest) String() string { return proto.CompactTextString(m) }
func (*AddCertRequest) ProtoMessage()    {}
func (*AddCertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{2}
}

func (m *AddCertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddCertRequest.Unmarshal(m, b)
}
func (m *AddCertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddCertRequest.Marshal(b, m, deterministic)
}
func (m *AddCertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddCertRequest.Merge(m, src)
}
func (m *AddCertRequest) XXX_Size() int {
	return xxx_messageInfo_AddCertRequest.Size(m)
}
func (m *AddCertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddCertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddCertRequest proto.InternalMessageInfo

func (m *AddCertRequest) GetId() *protos.Identity {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AddCertRequest) GetCertDer() []byte {
	if m != nil {
		return m.CertDer
	}
	return nil
}

func (m *AddCertRequest) GetCertType() protos.CertType {
	if m != nil {
		return m.CertType
	}
	return protos.CertType_DEFAULT
}

type SerialNumbers struct {
	Sns                  []string `protobuf:"bytes,1,rep,name=sns,proto3" json:"sns,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerialNumbers) Reset()         { *m = SerialNumbers{} }
func (m *SerialNumbers) String() string { return proto.CompactTextString(m) }
func (*SerialNumbers) ProtoMessage()    {}
func (*SerialNumbers) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{3}
}

func (m *SerialNumbers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerialNumbers.Unmarshal(m, b)
}
func (m *SerialNumbers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerialNumbers.Marshal(b, m, deterministic)
}
func (m *SerialNumbers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerialNumbers.Merge(m, src)
}
func (m *SerialNumbers) XXX_Size() int {
	return xxx_messageInfo_SerialNumbers.Size(m)
}
func (m *SerialNumbers) XXX_DiscardUnknown() {
	xxx_messageInfo_SerialNumbers.DiscardUnknown(m)
}

var xxx_messageInfo_SerialNumbers proto.InternalMessageInfo

func (m *SerialNumbers) GetSns() []string {
	if m != nil {
		return m.Sns
	}
	return nil
}

type GetCARequest struct {
	CertType             protos.CertType `protobuf:"varint,1,opt,name=cert_type,json=certType,proto3,enum=magma.orc8r.CertType" json:"cert_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetCARequest) Reset()         { *m = GetCARequest{} }
func (m *GetCARequest) String() string { return proto.CompactTextString(m) }
func (*GetCARequest) ProtoMessage()    {}
func (*GetCARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{4}
}

func (m *GetCARequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCARequest.Unmarshal(m, b)
}
func (m *GetCARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCARequest.Marshal(b, m, deterministic)
}
func (m *GetCARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCARequest.Merge(m, src)
}
func (m *GetCARequest) XXX_Size() int {
	return xxx_messageInfo_GetCARequest.Size(m)
}
func (m *GetCARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCARequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCARequest proto.InternalMessageInfo

func (m *GetCARequest) GetCertType() protos.CertType {
	if m != nil {
		return m.CertType
	}
	return protos.CertType_DEFAULT
}

type TokenList struct {
	Tokens               []string `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenList) Reset()         { *m = TokenList{} }
func (m *TokenList) String() string { return proto.CompactTextString(m) }
func (*TokenList) ProtoMessage()    {}
func (*TokenList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{5}
}

func (m *TokenList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenList.Unmarshal(m, b)
}
func (m *TokenList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenList.Marshal(b, m, deterministic)
}
func (m *TokenList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenList.Merge(m, src)
}
func (m *TokenList) XXX_Size() int {
	return xxx_messageInfo_TokenList.Size(m)
}
func (m *TokenList) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenList.DiscardUnknown(m)
}

var xxx_messageInfo_TokenList proto.InternalMessageInfo

func (m *TokenList) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type User struct {
	Username             string     `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             []byte     `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Tokens               *TokenList `protobuf:"bytes,3,opt,name=tokens,proto3" json:"tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{6}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *User) GetTokens() *TokenList {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type Resource struct {
	Effect               Effect       `protobuf:"varint,1,opt,name=effect,proto3,enum=magma.orc8r.certifier.Effect" json:"effect,omitempty"`
	Action               Action       `protobuf:"varint,2,opt,name=action,proto3,enum=magma.orc8r.certifier.Action" json:"action,omitempty"`
	ResourceType         ResourceType `protobuf:"varint,3,opt,name=resourceType,proto3,enum=magma.orc8r.certifier.ResourceType" json:"resourceType,omitempty"`
	Resource             string       `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{7}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetEffect() Effect {
	if m != nil {
		return m.Effect
	}
	return Effect_UNKNOWN
}

func (m *Resource) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_NONE
}

func (m *Resource) GetResourceType() ResourceType {
	if m != nil {
		return m.ResourceType
	}
	return ResourceType_URI
}

func (m *Resource) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

type ResourceList struct {
	Resources            []*Resource `protobuf:"bytes,4,rep,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ResourceList) Reset()         { *m = ResourceList{} }
func (m *ResourceList) String() string { return proto.CompactTextString(m) }
func (*ResourceList) ProtoMessage()    {}
func (*ResourceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{8}
}

func (m *ResourceList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceList.Unmarshal(m, b)
}
func (m *ResourceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceList.Marshal(b, m, deterministic)
}
func (m *ResourceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceList.Merge(m, src)
}
func (m *ResourceList) XXX_Size() int {
	return xxx_messageInfo_ResourceList.Size(m)
}
func (m *ResourceList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceList.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceList proto.InternalMessageInfo

func (m *ResourceList) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

type Policy struct {
	Token                string        `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Resources            *ResourceList `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{9}
}

func (m *Policy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Policy.Unmarshal(m, b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return xxx_messageInfo_Policy.Size(m)
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Policy) GetResources() *ResourceList {
	if m != nil {
		return m.Resources
	}
	return nil
}

type GetUserRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserRequest) Reset()         { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()    {}
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{10}
}

func (m *GetUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserRequest.Unmarshal(m, b)
}
func (m *GetUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserRequest.Marshal(b, m, deterministic)
}
func (m *GetUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserRequest.Merge(m, src)
}
func (m *GetUserRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserRequest.Size(m)
}
func (m *GetUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserRequest proto.InternalMessageInfo

func (m *GetUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type CreateUserRequest struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Policy               *Policy  `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateUserRequest) Reset()         { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()    {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{11}
}

func (m *CreateUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateUserRequest.Unmarshal(m, b)
}
func (m *CreateUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateUserRequest.Marshal(b, m, deterministic)
}
func (m *CreateUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserRequest.Merge(m, src)
}
func (m *CreateUserRequest) XXX_Size() int {
	return xxx_messageInfo_CreateUserRequest.Size(m)
}
func (m *CreateUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserRequest proto.InternalMessageInfo

func (m *CreateUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CreateUserRequest) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type GetPolicyDecisionRequest struct {
	Username             string    `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Token                string    `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Resource             *Resource `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetPolicyDecisionRequest) Reset()         { *m = GetPolicyDecisionRequest{} }
func (m *GetPolicyDecisionRequest) String() string { return proto.CompactTextString(m) }
func (*GetPolicyDecisionRequest) ProtoMessage()    {}
func (*GetPolicyDecisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{12}
}

func (m *GetPolicyDecisionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPolicyDecisionRequest.Unmarshal(m, b)
}
func (m *GetPolicyDecisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPolicyDecisionRequest.Marshal(b, m, deterministic)
}
func (m *GetPolicyDecisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicyDecisionRequest.Merge(m, src)
}
func (m *GetPolicyDecisionRequest) XXX_Size() int {
	return xxx_messageInfo_GetPolicyDecisionRequest.Size(m)
}
func (m *GetPolicyDecisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicyDecisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicyDecisionRequest proto.InternalMessageInfo

func (m *GetPolicyDecisionRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetPolicyDecisionRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetPolicyDecisionRequest) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

type PolicyDecision struct {
	Effect               Effect   `protobuf:"varint,1,opt,name=effect,proto3,enum=magma.orc8r.certifier.Effect" json:"effect,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PolicyDecision) Reset()         { *m = PolicyDecision{} }
func (m *PolicyDecision) String() string { return proto.CompactTextString(m) }
func (*PolicyDecision) ProtoMessage()    {}
func (*PolicyDecision) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{13}
}

func (m *PolicyDecision) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyDecision.Unmarshal(m, b)
}
func (m *PolicyDecision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyDecision.Marshal(b, m, deterministic)
}
func (m *PolicyDecision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyDecision.Merge(m, src)
}
func (m *PolicyDecision) XXX_Size() int {
	return xxx_messageInfo_PolicyDecision.Size(m)
}
func (m *PolicyDecision) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyDecision.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyDecision proto.InternalMessageInfo

func (m *PolicyDecision) GetEffect() Effect {
	if m != nil {
		return m.Effect
	}
	return Effect_UNKNOWN
}

type ListUsersResponse struct {
	Users                []*User  `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUsersResponse) Reset()         { *m = ListUsersResponse{} }
func (m *ListUsersResponse) String() string { return proto.CompactTextString(m) }
func (*ListUsersResponse) ProtoMessage()    {}
func (*ListUsersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0037205171c15011, []int{14}
}

func (m *ListUsersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUsersResponse.Unmarshal(m, b)
}
func (m *ListUsersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUsersResponse.Marshal(b, m, deterministic)
}
func (m *ListUsersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUsersResponse.Merge(m, src)
}
func (m *ListUsersResponse) XXX_Size() int {
	return xxx_messageInfo_ListUsersResponse.Size(m)
}
func (m *ListUsersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUsersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListUsersResponse proto.InternalMessageInfo

func (m *ListUsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterEnum("magma.orc8r.certifier.Effect", Effect_name, Effect_value)
	proto.RegisterEnum("magma.orc8r.certifier.Action", Action_name, Action_value)
	proto.RegisterEnum("magma.orc8r.certifier.ResourceType", ResourceType_name, ResourceType_value)
	proto.RegisterType((*CertificateInfo)(nil), "magma.orc8r.certifier.CertificateInfo")
	proto.RegisterType((*CertificateInfoMap)(nil), "magma.orc8r.certifier.CertificateInfoMap")
	proto.RegisterMapType((map[string]*CertificateInfo)(nil), "magma.orc8r.certifier.CertificateInfoMap.CertificatesEntry")
	proto.RegisterType((*AddCertRequest)(nil), "magma.orc8r.certifier.AddCertRequest")
	proto.RegisterType((*SerialNumbers)(nil), "magma.orc8r.certifier.SerialNumbers")
	proto.RegisterType((*GetCARequest)(nil), "magma.orc8r.certifier.GetCARequest")
	proto.RegisterType((*TokenList)(nil), "magma.orc8r.certifier.TokenList")
	proto.RegisterType((*User)(nil), "magma.orc8r.certifier.User")
	proto.RegisterType((*Resource)(nil), "magma.orc8r.certifier.Resource")
	proto.RegisterType((*ResourceList)(nil), "magma.orc8r.certifier.ResourceList")
	proto.RegisterType((*Policy)(nil), "magma.orc8r.certifier.Policy")
	proto.RegisterType((*GetUserRequest)(nil), "magma.orc8r.certifier.GetUserRequest")
	proto.RegisterType((*CreateUserRequest)(nil), "magma.orc8r.certifier.CreateUserRequest")
	proto.RegisterType((*GetPolicyDecisionRequest)(nil), "magma.orc8r.certifier.GetPolicyDecisionRequest")
	proto.RegisterType((*PolicyDecision)(nil), "magma.orc8r.certifier.PolicyDecision")
	proto.RegisterType((*ListUsersResponse)(nil), "magma.orc8r.certifier.ListUsersResponse")
}

func init() {
	proto.RegisterFile("orc8r/cloud/go/services/certifier/protos/certifier.proto", fileDescriptor_0037205171c15011)
}

var fileDescriptor_0037205171c15011 = []byte{
	// 1062 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xef, 0x6e, 0xe3, 0x44,
	0x10, 0xb7, 0xd3, 0x36, 0xad, 0xa7, 0xbd, 0x90, 0x2c, 0x1c, 0xca, 0xf9, 0x40, 0x57, 0x7c, 0x14,
	0x4a, 0x85, 0x12, 0x28, 0x02, 0x0a, 0x07, 0x48, 0x69, 0x9a, 0x0b, 0xe5, 0x5a, 0x17, 0xb6, 0x29,
	0x15, 0x7c, 0x89, 0x5c, 0x67, 0x12, 0x59, 0x4d, 0xbc, 0xc1, 0xbb, 0x29, 0x44, 0x7c, 0x47, 0xe2,
	0x21, 0x41, 0xbc, 0x02, 0x6f, 0x80, 0x76, 0x6d, 0x27, 0x76, 0x63, 0xa7, 0x11, 0x9f, 0xe2, 0xd9,
	0xf9, 0xcd, 0x6f, 0xfe, 0xee, 0x6c, 0xe0, 0x88, 0x05, 0xee, 0x51, 0x50, 0x77, 0x87, 0x6c, 0xd2,
	0xab, 0x0f, 0x58, 0x9d, 0x63, 0x70, 0xe7, 0xb9, 0xc8, 0xeb, 0x2e, 0x06, 0xc2, 0xeb, 0x7b, 0x18,
	0xd4, 0xc7, 0x01, 0x13, 0x2c, 0x71, 0x50, 0x53, 0x07, 0xe4, 0xf1, 0xc8, 0x19, 0x8c, 0x9c, 0x9a,
	0xb2, 0xaf, 0xcd, 0x94, 0xe6, 0x5b, 0x21, 0x61, 0xb6, 0x91, 0xf9, 0x24, 0xad, 0x65, 0xa3, 0x11,
	0xf3, 0x23, 0xd5, 0xd3, 0x94, 0xca, 0xeb, 0xa1, 0x2f, 0x3c, 0x31, 0x8d, 0x94, 0xcf, 0x06, 0x8c,
	0x0d, 0x86, 0x18, 0x6a, 0x6f, 0x26, 0xfd, 0xba, 0xf0, 0x46, 0xc8, 0x85, 0x33, 0x1a, 0x87, 0x00,
	0xeb, 0x1f, 0x1d, 0x5e, 0x6b, 0x86, 0xce, 0x5c, 0x47, 0xe0, 0xa9, 0xdf, 0x67, 0x64, 0x0f, 0x0a,
	0x5e, 0xaf, 0xaa, 0xef, 0xea, 0xfb, 0xdb, 0x87, 0x8f, 0x6b, 0xc9, 0x70, 0x4f, 0x23, 0x76, 0x5a,
	0xf0, 0x7a, 0xe4, 0x0b, 0x00, 0x9f, 0x89, 0xee, 0x0d, 0xf6, 0x59, 0x80, 0xd5, 0x82, 0x82, 0x9b,
	0xb5, 0xd0, 0x61, 0x2d, 0x76, 0x58, 0xeb, 0xc4, 0x0e, 0xa9, 0xe1, 0x33, 0x71, 0xac, 0xc0, 0xe4,
	0x73, 0x90, 0x42, 0xd7, 0xe9, 0x0b, 0x0c, 0xaa, 0x6b, 0x0f, 0x5a, 0x6e, 0xf9, 0x4c, 0x34, 0x24,
	0x96, 0x1c, 0x82, 0x21, 0x4b, 0xd3, 0x15, 0xd3, 0x31, 0x56, 0xd7, 0x77, 0xf5, 0xfd, 0xd2, 0xbd,
	0x08, 0x65, 0x2e, 0x9d, 0xe9, 0x18, 0xe9, 0x96, 0x1b, 0x7d, 0x59, 0x7f, 0xeb, 0x40, 0xee, 0xa5,
	0x78, 0xee, 0x8c, 0x49, 0x17, 0x76, 0xdc, 0xf9, 0x29, 0xaf, 0xea, 0xbb, 0x6b, 0xfb, 0xdb, 0x87,
	0x2f, 0x6a, 0x99, 0xed, 0xa9, 0x2d, 0x12, 0x24, 0x8f, 0x78, 0xcb, 0x17, 0xc1, 0x94, 0xa6, 0x08,
	0xcd, 0x01, 0x54, 0x16, 0x20, 0xa4, 0x0c, 0x6b, 0xb7, 0x38, 0x55, 0xc5, 0x35, 0xa8, 0xfc, 0x24,
	0x5f, 0xc1, 0xc6, 0x9d, 0x33, 0x9c, 0xc4, 0x15, 0x7c, 0x6f, 0xb5, 0x00, 0x68, 0x68, 0xf4, 0x65,
	0xe1, 0x48, 0xb7, 0xfe, 0xd0, 0xa1, 0xd4, 0xe8, 0xf5, 0x24, 0x82, 0xe2, 0x2f, 0x13, 0xe4, 0x62,
	0xd5, 0x16, 0x3e, 0x01, 0x55, 0xa6, 0x6e, 0x0f, 0x03, 0xe5, 0x7e, 0x87, 0x6e, 0x4a, 0xf9, 0xe4,
	0x7e, 0xa5, 0xd7, 0x56, 0xab, 0xf4, 0x3b, 0xf0, 0xe8, 0x12, 0x03, 0xcf, 0x19, 0xda, 0x93, 0xd1,
	0x0d, 0x06, 0x5c, 0x66, 0xcb, 0xfd, 0xb0, 0xb4, 0x06, 0x95, 0x9f, 0xd6, 0x31, 0xec, 0xb4, 0x51,
	0x34, 0x1b, 0x71, 0xa0, 0x29, 0x37, 0xfa, 0x6a, 0x6e, 0x9e, 0x83, 0xd1, 0x61, 0xb7, 0xe8, 0x9f,
	0x79, 0x5c, 0x90, 0x37, 0xa1, 0x28, 0xa4, 0x10, 0x7b, 0x89, 0x24, 0xeb, 0x37, 0x58, 0xbf, 0xe2,
	0x18, 0x10, 0x13, 0xb6, 0x26, 0x1c, 0x03, 0xdf, 0x19, 0x61, 0x54, 0xf5, 0x99, 0x2c, 0x75, 0x63,
	0x87, 0xf3, 0x5f, 0x59, 0xd0, 0x8b, 0xd2, 0x9f, 0xc9, 0xe4, 0x68, 0xc6, 0x1b, 0xce, 0xe7, 0x6e,
	0x4e, 0x5f, 0x66, 0x91, 0xcc, 0x3c, 0xff, 0xa5, 0xc3, 0x16, 0x45, 0xce, 0x26, 0x81, 0x8b, 0xe4,
	0x53, 0x28, 0x62, 0xbf, 0x8f, 0xae, 0x88, 0x92, 0x7b, 0x3b, 0x87, 0xa6, 0xa5, 0x40, 0x34, 0x02,
	0x4b, 0x33, 0xc7, 0x15, 0x1e, 0xf3, 0x55, 0x5c, 0xf9, 0x66, 0x0d, 0x05, 0xa2, 0x11, 0x98, 0xb4,
	0x61, 0x27, 0x88, 0x3c, 0x77, 0xe6, 0x7d, 0x7b, 0x9e, 0x63, 0x4c, 0x13, 0x50, 0x9a, 0x32, 0x94,
	0x95, 0x89, 0x65, 0x75, 0xcd, 0x0c, 0x3a, 0x93, 0xad, 0x73, 0xd8, 0x89, 0x2d, 0x55, 0x07, 0xbe,
	0x06, 0x23, 0xd6, 0xf1, 0xea, 0xba, 0xba, 0x45, 0xcf, 0x1e, 0xf0, 0x48, 0xe7, 0x16, 0x96, 0x03,
	0xc5, 0xef, 0xd9, 0xd0, 0x73, 0xa7, 0xe4, 0x0d, 0xd8, 0x50, 0x25, 0x8c, 0xfa, 0x14, 0x0a, 0xa4,
	0x91, 0xa6, 0x97, 0xbd, 0x78, 0x28, 0x21, 0xd5, 0x8e, 0x84, 0x8b, 0x0f, 0xa1, 0xd4, 0x46, 0x21,
	0xc7, 0x21, 0x1e, 0xbb, 0x25, 0x53, 0x61, 0xfd, 0x0e, 0x95, 0x66, 0x80, 0x8e, 0xc0, 0xa4, 0x41,
	0x1d, 0xd6, 0x25, 0x20, 0xba, 0x52, 0x4f, 0x73, 0x02, 0x50, 0x16, 0x0a, 0x28, 0x3b, 0x38, 0x56,
	0x69, 0x45, 0xf7, 0x3a, 0xaf, 0x83, 0x61, 0xee, 0x34, 0x02, 0x5b, 0x7f, 0xea, 0x50, 0x6d, 0xa3,
	0x08, 0x4f, 0x4f, 0xd0, 0xf5, 0xb8, 0xec, 0xef, 0xc3, 0x51, 0xcf, 0x8b, 0x57, 0x48, 0x16, 0xef,
	0x45, 0xa2, 0x8f, 0xe1, 0x1c, 0x3f, 0xd8, 0x9a, 0x79, 0xa3, 0xdb, 0x50, 0x4a, 0xc7, 0xf1, 0x3f,
	0xa7, 0xd9, 0x7a, 0x09, 0x15, 0xd9, 0x12, 0x59, 0x1d, 0x4e, 0x91, 0x8f, 0x99, 0xcf, 0x91, 0x7c,
	0x0c, 0x1b, 0x32, 0xf8, 0x78, 0xf1, 0x2e, 0x2d, 0x69, 0x88, 0x3c, 0x38, 0x80, 0x62, 0xc8, 0x4c,
	0xb6, 0x61, 0xf3, 0xca, 0x7e, 0x65, 0x5f, 0x5c, 0xdb, 0x65, 0x8d, 0x6c, 0xc1, 0xfa, 0x49, 0xcb,
	0xfe, 0xa9, 0xac, 0x13, 0x03, 0x36, 0x1a, 0x67, 0x67, 0x17, 0xd7, 0xe5, 0xc2, 0xc1, 0xfb, 0x50,
	0x0c, 0x2f, 0x87, 0x54, 0xdb, 0x17, 0x76, 0x2b, 0x04, 0xd2, 0x56, 0xe3, 0x24, 0x04, 0x5e, 0xd3,
	0xd3, 0x4e, 0xab, 0x5c, 0x38, 0xf8, 0x6c, 0x3e, 0xce, 0x6a, 0xf4, 0x37, 0x61, 0xed, 0x8a, 0x9e,
	0x96, 0x35, 0x52, 0x02, 0xb0, 0x5b, 0x9d, 0xeb, 0x0b, 0xfa, 0xaa, 0x7b, 0x2a, 0x6d, 0x1e, 0x81,
	0xd1, 0x69, 0xd9, 0x0d, 0xbb, 0x23, 0xc5, 0xc2, 0xe1, 0xbf, 0x9b, 0x60, 0x34, 0xe3, 0x30, 0x49,
	0x13, 0x36, 0xd4, 0x5e, 0x23, 0x79, 0xb3, 0x99, 0xdc, 0x7a, 0xe6, 0xeb, 0xe9, 0x15, 0xd7, 0x90,
	0x3c, 0x96, 0x46, 0x8e, 0x81, 0x5c, 0x7a, 0x03, 0x3f, 0xda, 0xe5, 0xd1, 0xb6, 0x27, 0xe5, 0x34,
	0xf8, 0x92, 0x9a, 0xd5, 0x85, 0x0d, 0x19, 0x61, 0x2d, 0x8d, 0x74, 0x60, 0xbb, 0x8d, 0x22, 0xde,
	0xf2, 0xe4, 0x69, 0x1e, 0xb4, 0x76, 0x69, 0x9b, 0x2b, 0xbe, 0x35, 0x96, 0x46, 0x5a, 0x50, 0xa1,
	0x78, 0xc7, 0x6e, 0x31, 0x19, 0xd8, 0x52, 0xee, 0x4a, 0x4a, 0xf9, 0x23, 0xf3, 0x7a, 0x96, 0x46,
	0xce, 0x66, 0x0f, 0x55, 0xcc, 0xb1, 0x97, 0xb7, 0xd8, 0x52, 0xef, 0x59, 0x36, 0xdb, 0x0f, 0x50,
	0x7e, 0xe9, 0xf9, 0x49, 0x3a, 0x4e, 0xb2, 0x1f, 0x3b, 0xf3, 0xdd, 0x1c, 0x37, 0xa9, 0xe7, 0xca,
	0xd2, 0xc8, 0x39, 0x94, 0xe5, 0xa4, 0xa6, 0x28, 0x17, 0x7d, 0xaf, 0x4c, 0xf7, 0x2d, 0x14, 0xdb,
	0x28, 0x1a, 0xc3, 0x61, 0x16, 0xc9, 0x07, 0x2b, 0xff, 0xd5, 0xb0, 0x34, 0x72, 0x04, 0xa5, 0x26,
	0x1b, 0x0e, 0xd1, 0x15, 0x6d, 0x27, 0xb8, 0x71, 0x06, 0x98, 0xc5, 0x98, 0x59, 0xa5, 0x11, 0x54,
	0x16, 0x16, 0x0a, 0xa9, 0xe7, 0x4f, 0x69, 0xe6, 0xea, 0x31, 0xf7, 0x96, 0xae, 0xaf, 0x18, 0x6d,
	0x69, 0xe4, 0x1b, 0x80, 0xf9, 0xf6, 0x24, 0xcb, 0x6e, 0x75, 0x76, 0xb8, 0xdf, 0x81, 0x31, 0xdb,
	0x15, 0x59, 0x39, 0xee, 0xe7, 0x30, 0x2e, 0x2c, 0x18, 0x4b, 0x23, 0x17, 0xb0, 0x19, 0xed, 0xfd,
	0xdc, 0x39, 0x4b, 0xbf, 0x0b, 0xe6, 0xb2, 0x78, 0x2d, 0xed, 0xf8, 0xa3, 0x9f, 0x43, 0x7d, 0x7d,
	0xd5, 0x7f, 0xff, 0x37, 0x45, 0xf5, 0xfb, 0xc9, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x4a,
	0xdb, 0xee, 0x30, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CertifierClient is the client API for Certifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertifierClient interface {
	// Returns the cert of the requested CA
	GetCA(ctx context.Context, in *GetCARequest, opts ...grpc.CallOption) (*protos.CACert, error)
	// Signs and adds a new certificate to the store.
	// Returns signed certificate.
	//
	SignAddCertificate(ctx context.Context, in *protos.CSR, opts ...grpc.CallOption) (*protos.Certificate, error)
	// Returns the CertificateInfo for a certificate.
	// Throws NOT_FOUND if the certificate is missing.
	//
	GetIdentity(ctx context.Context, in *protos.Certificate_SN, opts ...grpc.CallOption) (*CertificateInfo, error)
	// Revoke an existing certificate.
	// If the certificate does not exist or is expired, this request is ignored.
	//
	RevokeCertificate(ctx context.Context, in *protos.Certificate_SN, opts ...grpc.CallOption) (*protos.Void, error)
	// Add provided Certificate (AddCertRequest.cert_der) into Certifier table and
	// associates its Serial Number with given Identity (AddCertRequest.id)
	AddCertificate(ctx context.Context, in *AddCertRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Finds & returns Serial Numbers of all Certificates associated with the
	// given Identity
	FindCertificates(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*SerialNumbers, error)
	// Returns serial numbers of all certificates in the table
	ListCertificates(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SerialNumbers, error)
	// Returns all registered Certificates
	GetAll(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*CertificateInfoMap, error)
	// cleanup expired certificates
	CollectGarbage(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Void, error)
	// Returns a policy decision given a token, the request method's action
	// (read/write), and the request resource
	GetPolicyDecision(ctx context.Context, in *GetPolicyDecisionRequest, opts ...grpc.CallOption) (*PolicyDecision, error)
	// Creates a new user
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*protos.Void, error)
	// ListUsers all users and their information
	ListUsers(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Gets a user based on their username
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
}

type certifierClient struct {
	cc grpc.ClientConnInterface
}

func NewCertifierClient(cc grpc.ClientConnInterface) CertifierClient {
	return &certifierClient{cc}
}

func (c *certifierClient) GetCA(ctx context.Context, in *GetCARequest, opts ...grpc.CallOption) (*protos.CACert, error) {
	out := new(protos.CACert)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/GetCA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certifierClient) SignAddCertificate(ctx context.Context, in *protos.CSR, opts ...grpc.CallOption) (*protos.Certificate, error) {
	out := new(protos.Certificate)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/SignAddCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certifierClient) GetIdentity(ctx context.Context, in *protos.Certificate_SN, opts ...grpc.CallOption) (*CertificateInfo, error) {
	out := new(CertificateInfo)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/GetIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certifierClient) RevokeCertificate(ctx context.Context, in *protos.Certificate_SN, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/RevokeCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certifierClient) AddCertificate(ctx context.Context, in *AddCertRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/AddCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certifierClient) FindCertificates(ctx context.Context, in *protos.Identity, opts ...grpc.CallOption) (*SerialNumbers, error) {
	out := new(SerialNumbers)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/FindCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certifierClient) ListCertificates(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SerialNumbers, error) {
	out := new(SerialNumbers)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/ListCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certifierClient) GetAll(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*CertificateInfoMap, error) {
	out := new(CertificateInfoMap)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certifierClient) CollectGarbage(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/CollectGarbage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certifierClient) GetPolicyDecision(ctx context.Context, in *GetPolicyDecisionRequest, opts ...grpc.CallOption) (*PolicyDecision, error) {
	out := new(PolicyDecision)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/GetPolicyDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certifierClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certifierClient) ListUsers(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certifierClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/magma.orc8r.certifier.Certifier/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertifierServer is the server API for Certifier service.
type CertifierServer interface {
	// Returns the cert of the requested CA
	GetCA(context.Context, *GetCARequest) (*protos.CACert, error)
	// Signs and adds a new certificate to the store.
	// Returns signed certificate.
	//
	SignAddCertificate(context.Context, *protos.CSR) (*protos.Certificate, error)
	// Returns the CertificateInfo for a certificate.
	// Throws NOT_FOUND if the certificate is missing.
	//
	GetIdentity(context.Context, *protos.Certificate_SN) (*CertificateInfo, error)
	// Revoke an existing certificate.
	// If the certificate does not exist or is expired, this request is ignored.
	//
	RevokeCertificate(context.Context, *protos.Certificate_SN) (*protos.Void, error)
	// Add provided Certificate (AddCertRequest.cert_der) into Certifier table and
	// associates its Serial Number with given Identity (AddCertRequest.id)
	AddCertificate(context.Context, *AddCertRequest) (*protos.Void, error)
	// Finds & returns Serial Numbers of all Certificates associated with the
	// given Identity
	FindCertificates(context.Context, *protos.Identity) (*SerialNumbers, error)
	// Returns serial numbers of all certificates in the table
	ListCertificates(context.Context, *protos.Void) (*SerialNumbers, error)
	// Returns all registered Certificates
	GetAll(context.Context, *protos.Void) (*CertificateInfoMap, error)
	// cleanup expired certificates
	CollectGarbage(context.Context, *protos.Void) (*protos.Void, error)
	// Returns a policy decision given a token, the request method's action
	// (read/write), and the request resource
	GetPolicyDecision(context.Context, *GetPolicyDecisionRequest) (*PolicyDecision, error)
	// Creates a new user
	CreateUser(context.Context, *User) (*protos.Void, error)
	// ListUsers all users and their information
	ListUsers(context.Context, *protos.Void) (*ListUsersResponse, error)
	// Gets a user based on their username
	GetUser(context.Context, *GetUserRequest) (*User, error)
}

// UnimplementedCertifierServer can be embedded to have forward compatible implementations.
type UnimplementedCertifierServer struct {
}

func (*UnimplementedCertifierServer) GetCA(ctx context.Context, req *GetCARequest) (*protos.CACert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCA not implemented")
}
func (*UnimplementedCertifierServer) SignAddCertificate(ctx context.Context, req *protos.CSR) (*protos.Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignAddCertificate not implemented")
}
func (*UnimplementedCertifierServer) GetIdentity(ctx context.Context, req *protos.Certificate_SN) (*CertificateInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentity not implemented")
}
func (*UnimplementedCertifierServer) RevokeCertificate(ctx context.Context, req *protos.Certificate_SN) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificate not implemented")
}
func (*UnimplementedCertifierServer) AddCertificate(ctx context.Context, req *AddCertRequest) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCertificate not implemented")
}
func (*UnimplementedCertifierServer) FindCertificates(ctx context.Context, req *protos.Identity) (*SerialNumbers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCertificates not implemented")
}
func (*UnimplementedCertifierServer) ListCertificates(ctx context.Context, req *protos.Void) (*SerialNumbers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificates not implemented")
}
func (*UnimplementedCertifierServer) GetAll(ctx context.Context, req *protos.Void) (*CertificateInfoMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedCertifierServer) CollectGarbage(ctx context.Context, req *protos.Void) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectGarbage not implemented")
}
func (*UnimplementedCertifierServer) GetPolicyDecision(ctx context.Context, req *GetPolicyDecisionRequest) (*PolicyDecision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyDecision not implemented")
}
func (*UnimplementedCertifierServer) CreateUser(ctx context.Context, req *User) (*protos.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedCertifierServer) ListUsers(ctx context.Context, req *protos.Void) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedCertifierServer) GetUser(ctx context.Context, req *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}

func RegisterCertifierServer(s *grpc.Server, srv CertifierServer) {
	s.RegisterService(&_Certifier_serviceDesc, srv)
}

func _Certifier_GetCA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).GetCA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/GetCA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).GetCA(ctx, req.(*GetCARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certifier_SignAddCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.CSR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).SignAddCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/SignAddCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).SignAddCertificate(ctx, req.(*protos.CSR))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certifier_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Certificate_SN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/GetIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).GetIdentity(ctx, req.(*protos.Certificate_SN))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certifier_RevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Certificate_SN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).RevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/RevokeCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).RevokeCertificate(ctx, req.(*protos.Certificate_SN))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certifier_AddCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).AddCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/AddCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).AddCertificate(ctx, req.(*AddCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certifier_FindCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).FindCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/FindCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).FindCertificates(ctx, req.(*protos.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certifier_ListCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).ListCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/ListCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).ListCertificates(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certifier_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).GetAll(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certifier_CollectGarbage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).CollectGarbage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/CollectGarbage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).CollectGarbage(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certifier_GetPolicyDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).GetPolicyDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/GetPolicyDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).GetPolicyDecision(ctx, req.(*GetPolicyDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certifier_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certifier_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).ListUsers(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Certifier_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertifierServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.certifier.Certifier/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertifierServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Certifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.certifier.Certifier",
	HandlerType: (*CertifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCA",
			Handler:    _Certifier_GetCA_Handler,
		},
		{
			MethodName: "SignAddCertificate",
			Handler:    _Certifier_SignAddCertificate_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _Certifier_GetIdentity_Handler,
		},
		{
			MethodName: "RevokeCertificate",
			Handler:    _Certifier_RevokeCertificate_Handler,
		},
		{
			MethodName: "AddCertificate",
			Handler:    _Certifier_AddCertificate_Handler,
		},
		{
			MethodName: "FindCertificates",
			Handler:    _Certifier_FindCertificates_Handler,
		},
		{
			MethodName: "ListCertificates",
			Handler:    _Certifier_ListCertificates_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Certifier_GetAll_Handler,
		},
		{
			MethodName: "CollectGarbage",
			Handler:    _Certifier_CollectGarbage_Handler,
		},
		{
			MethodName: "GetPolicyDecision",
			Handler:    _Certifier_GetPolicyDecision_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Certifier_CreateUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Certifier_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Certifier_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/cloud/go/services/certifier/protos/certifier.proto",
}
